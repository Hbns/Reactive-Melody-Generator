----------Compiled Haai reactor-----------------------------
// %R prefix voor reactor en naam van de reactor
((%R plus-time-one 
  // deployment-time instructies: (wordt uitgevoerd voor de uitvoering van de eerste reactie van een deployment.)
  // (in dit geval twee keer een deployment van de + reactor)
  ((I-ALLOCMONO +) (I-ALLOCMONO +)) 
  // reaction-time instructies:
  ((I-LOOKUP time) 
  // Eerste argument is waar je “lokaal” een waarde gaat terugvinden die je gaat supply’n, 
  // tweede is lokaal een adres waar je een deployment-adres in kan terugvinden,
  // derde is om welke source het gaat.
  (I-SUPPLY (%RREF 1) (%DREF 1) 1) 
  (I-SUPPLY (%SRC 1) (%DREF 1) 2) 
  (I-REACT (%DREF 1)) 
  (I-CONSUME (%DREF 1) 1) 
  (I-SUPPLY (%RREF 5) (%DREF 2) 1) 
  // instructie=I-SUPPLY, 
  (I-SUPPLY 1 (%DREF 2) 2) 
  (I-REACT (%DREF 2)) 
  (I-CONSUME (%DREF 2) 1) 
  (I-SINK (%RREF 9) 1))
  ))

-----------Same code on one line------------------------------

((%R plus-time-one ((I-ALLOCMONO +) (I-ALLOCMONO +)) ((I-LOOKUP time) (I-SUPPLY (%RREF 1) (%DREF 1) 1) (I-SUPPLY (%SRC 1) (%DREF 1) 2) (I-REACT (%DREF 1)) (I-CONSUME (%DREF 1) 1) (I-SUPPLY (%RREF 5) (%DREF 2) 1) (I-SUPPLY 1 (%DREF 2) 2) (I-REACT (%DREF 2)) (I-CONSUME (%DREF 2) 1) (I-SINK (%RREF 9) 1))))

-----------Texttual conversion to Elixir lits------
[ plus-time-one,
  [
    [I-ALLOCMONO, +],
    [I-ALLOCMONO, +]
  ] 
  [
    ["I-LOOKUP", "time"],
    ["I-SUPPLY", ["%RREF", 1], ["%DREF", 1], 1],
    ["I-SUPPLY", ["%SRC", 1], ["%DREF", 1], 2],
    ["I-REACT", ["%DREF, 1]],
    ["I-CONSUME", ["%DREF, 1], 1],
    ["I-SUPPLY", ["%RREF", 5], ["%DREF", 2], 1],
    ["I-SUPPLY", 1, ["%DREF", 2], 2],
    ["I-REACT", ["%DREF", 2]],
    ["I-CONSUME", ["%DREF", 2],1],
    ["I-SINK", ["%RREF", 9],1]
  ]  
]
-----------Haai (Same) code before compile---------

(displayln (parse-build-compile*
              `(
                 
                (defr (plus-time-one a)
                  (def x (+ time a))
                  (out (+ x 1)))

                ))
                

---TryParsing---
iex(6)> stin(I-LOOKUP time) (I-SUPPLY (%RREF 1) (%DREF 1) 1) (I-SUPPLY (%SRC 1) (%DREF 1) 2) (I-REACT (%DREF 1)) (I-CONSUME (%DREF 1) 1) (I-SUPPLY (%RREF 5) (%DREF 2) 1) (I-SUPPLY 1 (%DREF 2) 2) (I-REACT (%DREF 2)) (I-CONSUME (%DREF 2) 1) (I-SINK (%RREF 9) 1))))'
'((%R plus-time-one ((I-ALLOCMONO +) (I-ALLOCMONO +)) (
iex(7)> {:ok, tokens, _} = :haai_lexer.string(stin)                                                                            
{:ok,                                                                                                                          
 [                                                                
   {:"(", 1},
   {:"(", 1},
   {:reaktor, 1},
   {:atom, 1, 'plus-time-one'},
   {:"(", 1},
   {:"(", 1},
   {:instruction, 1, 'I-ALLOCMONO'},
   {:op, 1, '+'},
   {:")", 1},
   {:"(", 1},
   {:instruction, 1, 'I-ALLOCMONO'},
   {:op, 1, '+'},
   {:")", 1},
   {:")", 1},
   {:"(", 1},
   {:"(", 1},
   {:instruction, 1, 'I-LOOKUP'},
   {:atom, 1, 'time'},
   {:")", 1},
   {:"(", 1},
   {:instruction, 1, 'I-SUPPLY'},
   {:"(", 1},
   {:rref, 1},
   {:int, 1, 1},
   {:")", 1},
   {:"(", 1},
   {:dref, 1},
   {:int, 1, 1},
   {:")", 1},
   {:int, 1, 1},
   {:")", 1},
   {:"(", 1},
   {:instruction, 1, 'I-SUPPLY'},
   {:"(", 1},
   {:src, 1},
   {:int, 1, 1},
   {:")", 1},
   {:"(", 1},
   {:dref, 1},
   {:int, 1, 1},
   {:")", 1},
   {:int, 1, 2},
   {:")", 1},
   {:"(", 1},
   {:instruction, 1, 'I-REACT'},
   {:"(", 1},
   {:dref, ...},
   {...},
   ...
 ], 1}
--- gives ---
(not correctly)
iex(9)> :haai_parser.parse(tokens)
{:error,
 {1, :haai_parser,
  [
    'syntax error before: ',
    [[123, ['atom', 44, '1', 44, '"plus-time-one"'], 125]]
  ]}}

  ---------Elixir function-------
  def add_and_increment(input) do
    current_time = System.os_time()
    result = current_time + input
    result + 1
  end