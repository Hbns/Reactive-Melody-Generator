---
marp: true
---

# Higher-Order reactive Programs

Haai -> Bytecode -> Haai Vm in Elixir -> Distribute Haai Vm


---

# Haai, a pure reactive programming language
<!-- paginate: true -->
![opacity:.1 bg 50%](haai.png)
- This is not an Embedded Domain Specific Language, eg: no lifting.

<!-- EDSL is mostly build on top of existing non rp languages using a technique called lifting, but lifting has disadvantages like the mismatch between the host and rp language can lead to faulty behavior-->

---

# Haai, a pure reactive programming language
![opacity:.25 bg 50%](haai.png)

- Push-based, Haai updates signals in a glitch-free manner.

<!-- glitch free implementation will update the signal only when all dependencies are current, renewed before reproducing an output -->


---

# Haai, a pure reactive programming language


- A reactor loops, pushing the sources altered by the reactor to the sinks.

    
    ![Loop](loophaai.png)

---

# Cluster environments
- Make reactive programming with Haai available to cluster environments.
- Discover coordination problems.


---

# Cluster environments
-  Many Haai interpreters.

    ![Pzilla h:450](pzilla.png)

---

# Use case, musical reactors

- Microtonal melody generator. (eg: 31-EDO, 24-EDO, pure intonation)

    ![Sequence h:200](seq.png)
    Figure: Standard 12 tone equal temperament, 12 tet
- Open sound control (OSC) communication with Supercollider server.

---

# Master thesis, Timeline
![Timeline](timeline.png)

---

# Haai virtual machine
- Haai compiles to bytecode (S-expression) to [elixir [nested lists]].

---

# Haai code, reactor 'plus time one'
![opacity:.4 bg 50%](haai.png)
```
(defr (plus-time-one a)
    (def x (+ time a))                
    (out (+ x 1)))
```

---
# Virtual machine

- {name, sources, dtm, rtm, sinks}.
- GenServer to maintain state. (eg: dtm, rtm, src)
- Sources in, Sinks out.

---



 # Virtual machine
 ```
  defp run_reaktor(dtm, rtm, rti) do
    # reset the genserver (state) when starting
    case GenServer.whereis(:memory) do
      nil ->
        IO.puts("GenServer :memory is not running.")
      pid ->
        GenServer.stop(:memory)
        IO.puts("GenServer :memory (PID: #{inspect(pid)}) stopped successfully.")
    end
    Memory.start_link(dtm, rtm, [0, 9])
    # execute each rti
    Enum.each(Enum.with_index(rti), fn {instruction, rti_index} ->
      hrr(instruction, rti_index)
      Memory.show_state()
     end)
  end
```

---

# Higher-Order reactive Programs
- Haai -> Bytecode -> Haai Vm in Elixir -> Distribute Haai Vm
- BEAM VM runs the HAAI VM in a distributed setting.
- Researching issues that arise from distributing Haai reactors.
- Usecase, musical reactors.


