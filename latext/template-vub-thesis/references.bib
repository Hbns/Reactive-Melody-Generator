@inproceedings{oeyen2022reactive,
	title={Reactive Programming on the Bare Metal: A Formal Model for a Low-Level Reactive Virtual Machine},
	author={Oeyen, Bjarno and De Koster, Joeri and De Meuter, Wolfgang},
	booktitle={Proceedings of the 9th ACM SIGPLAN International Workshop on Reactive and Event-Based Languages and Systems},
	pages={50--62},
	year={2022}
}

@article{oeyen_reactive_2024,
	title = {Reactive Programming without Functions},
	volume = {8},
	issn = {2473-7321},
	url = {https://programming-journal.org/2024/8/11},
	doi = {10.22152/programming-journal.org/2024/8/11},
	abstract = {Context Reactive programming ({RP}) is a declarative programming paradigm suitable for expressing the handling of events. It enables programmers to create applications that react automatically to changes over time. Whenever a time-varying signal changes — e.g. in response to values produced by event stream (e.g., sensor data, user input…) — the program state is updated automatically in tandem with that change. This makes {RP} well-suited for building interactive applications and reactive (soft real-time) systems.},
	pages = {11},
	number = {3},
	journaltitle = {The Art, Science, and Engineering of Programming},
	shortjournal = {Programming},
	author = {Oeyen, Bjarno and De Koster, Joeri and De Meuter, Wolfgang},
	urldate = {2024-03-13},
	date = {2024-02-15},
	langid = {english},
}

@book{scBook,
author = {Wilson, Scott and Cottle, David and Collins, Nick},
title = {The SuperCollider Book},
year = {2011},
isbn = {0262232693},
publisher = {The MIT Press},
abstract = {SuperCollider is one of the most important domain-specific audio programming languages, with potential applications that include real-time interaction, installations, electroacoustic pieces, generative music, and audiovisuals. The SuperCollider Book is the essential reference to this powerful and flexible language, offering students and professionals a collection of tutorials, essays, and projects. With contributions from top academics, artists, and technologists that cover topics at levels from the introductory to the specialized, it will be a valuable sourcebook both for beginners and for advanced users. SuperCollider, first developed by James McCartney, is an accessible blend of Smalltalk, C, and further ideas from a number of programming languages. Free, open-source, cross-platform, and with a diverse and supportive developer community, it is often the first programming language sound artists and computer musicians learn. The SuperCollider Book is the long-awaited guide to the design, syntax, and use of the SuperCollider language. The first chapters offer an introduction to the basics, including a friendly tutorial for absolute beginners, providing the reader with skills that can serve as a foundation for further learning. Later chapters cover more advanced topics and particular topics in computer music, including programming, sonification, spatialization, microsound, GUIs, machine listening, alternative tunings, and non-real-time synthesis; practical applications and philosophical insigh"s from the composer's and artist's perspectives; and "under the hood," developer's-eye views of SuperCollider's inner workings. A Web site accompanying the book offers code, links to the application itself and its source code, and a variety of third-party extras, extensions, libraries, and examples.}
}

@inproceedings{de_koster_43_2016,
	location = {Amsterdam Netherlands},
	title = {43 years of actors: a taxonomy of actor models and their key properties},
	isbn = {978-1-4503-4639-9},
	url = {https://dl.acm.org/doi/10.1145/3001886.3001890},
	doi = {10.1145/3001886.3001890},
	shorttitle = {43 years of actors},
	abstract = {The Actor Model is a message passing concurrency model that was originally proposed by Hewitt et al. in 1973. It is now 43 years later and since then researchers have explored a plethora of variations on this model. This paper presents a history of the Actor Model throughout those years. The goal of this paper is not to provide an exhaustive overview of every actor system in existence but rather to give an overview of some of the exemplar languages and libraries that inﬂuenced the design and rationale of other actor systems throughout those years. This paper therefore shows that most actor systems can be roughly classiﬁed into four families, namely: Classic Actors, Active Objects, Processes and Communicating Event-Loops. This paper also deﬁnes the Isolated Turn Principle as a unifying principle across those four families. Additionally this paper lists some of the key properties along which actor systems can be evaluated and formulates some general insights about the design and rationale of the different actor families across those dimensions.},
	eventtitle = {{SPLASH} '16: Conference on Systems, Programming, Languages, and Applications: Software for Humanity},
	pages = {31--40},
	booktitle = {Proceedings of the 6th International Workshop on Programming Based on Actors, Agents, and Decentralized Control},
	publisher = {{ACM}},
	author = {De Koster, Joeri and Van Cutsem, Tom and De Meuter, Wolfgang},
	urldate = {2024-04-30},
	date = {2016-10-30},
	langid = {english},
}

@inproceedings{vonder_tackling_2020,
	location = {Dagstuhl, Germany},
	title = {Tackling the Awkward Squad for Reactive Programming: The Actor-Reactor Model},
	volume = {166},
	isbn = {978-3-95977-154-2},
	url = {https://drops.dagstuhl.de/opus/volltexte/2020/13176},
	doi = {10.4230/LIPIcs.ECOOP.2020.19},
	series = {Leibniz International Proceedings in Informatics ({LIPIcs})},
	shorttitle = {Tackling the Awkward Squad for Reactive Programming},
	pages = {19:1--19:29},
	booktitle = {34th European Conference on Object-Oriented Programming ({ECOOP} 2020)},
	publisher = {Schloss Dagstuhl–Leibniz-Zentrum für Informatik},
	author = {Vonder, Sam Van den and Renaux, Thierry and Oeyen, Bjarno and Koster, Joeri De and Meuter, Wolfgang De},
	editor = {Hirschfeld, Robert and Pape, Tobias},
	urldate = {2023-10-04},
	date = {2020},
	note = {{ISSN}: 1868-8969},
	keywords = {actors, functional reactive programming, reactive programming, reactive streams, reactors},
}

@inproceedings{oeyen_remus_2022,
	location = {Auckland New Zealand},
	title = {Reactive Programming on the Bare Metal: A Formal Model for a Low-Level Reactive Virtual Machine},
	isbn = {978-1-4503-9911-1},
	url = {https://dl.acm.org/doi/10.1145/3563837.3568342},
	doi = {10.1145/3563837.3568342},
	shorttitle = {Reactive Programming on the Bare Metal},
	abstract = {Reactive programming has many applications for embedded devices in {IoT} and other application domains. For these constrained devices it is crucial to bound the overhead of the execution of non-functional concerns such as  freedom. Reactive programming languages with static dependency graphs can implement glitch freedom by topologically sorting the dependency graph ahead of time. However, for more traditional reactive programming languages that support a dependency graph that can dynamically change, glitch freedom is typically implemented using a priority queue in which signals are enqueued according to their location in the graph. This is undesirable for embedded devices, as dynamically updating this priority queue has an undesirable, and sometimes unbounded, overhead. In this paper, we present a small-step operational semantics of a virtual machine specialised for running reactive programs that combines static ahead-of-time compilation of reactive programs into topologically sorted dependancy graphs while maintaining support for dynamic modifications to those dependency graphs.},
	eventtitle = {{REBLS} '22: 9th {ACM} {SIGPLAN} International Workshop on Reactive and Event-Based Languages and Systems},
	pages = {50--62},
	booktitle = {Proceedings of the 9th {ACM} {SIGPLAN} International Workshop on Reactive and Event-Based Languages and Systems},
	publisher = {{ACM}},
	author = {Oeyen, Bjarno and De Koster, Joeri and De Meuter, Wolfgang},
	urldate = {2023-09-26},
	date = {2022-11-29},
	langid = {english},
}	

@book{juric2024elixir,
	title={Elixir in action},
	author={Juric, Sa{\v{s}}a},
	year={2024},
	publisher={Simon and Schuster}
}

@article{DBLP:journals/csur/BainomugishaCCMM13,
	author       = {Engineer Bainomugisha and
	Andoni Lombide Carreton and
	Tom Van Cutsem and
	Stijn Mostinckx and
	Wolfgang De Meuter},
	title        = {A survey on reactive programming},
	journal      = {{ACM} Comput. Surv.},
	volume       = {45},
	number       = {4},
	pages        = {52:1--52:34},
	year         = {2013},
	url          = {https://doi.org/10.1145/2501654.2501666},
	doi          = {10.1145/2501654.2501666},
	timestamp    = {Tue, 06 Nov 2018 12:50:50 +0100},
	biburl       = {https://dblp.org/rec/journals/csur/BainomugishaCCMM13.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/debu/Stonebraker86,
	author       = {Michael Stonebraker},
	title        = {The Case for Shared Nothing},
	journal      = {{IEEE} Database Eng. Bull.},
	volume       = {9},
	number       = {1},
	pages        = {4--9},
	year         = {1986},
	url          = {http://sites.computer.org/debull/86MAR-CD.pdf},
	timestamp    = {Tue, 10 Mar 2020 16:23:50 +0100},
	biburl       = {https://dblp.org/rec/journals/debu/Stonebraker86.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/tools/CarretonMCM10,
	author       = {Andoni Lombide Carreton and
	Stijn Mostinckx and
	Tom Van Cutsem and
	Wolfgang De Meuter},
	editor       = {Jan Vitek},
	title        = {Loosely-Coupled Distributed Reactive Programming in Mobile Ad Hoc
	Networks},
	booktitle    = {Objects, Models, Components, Patterns, 48th International Conference,
	{TOOLS} 2010, M{\'{a}}laga, Spain, June 28 - July 2, 2010. Proceedings},
	series       = {Lecture Notes in Computer Science},
	volume       = {6141},
	pages        = {41--60},
	publisher    = {Springer},
	year         = {2010},
	url          = {https://doi.org/10.1007/978-3-642-13953-6\_3},
	doi          = {10.1007/978-3-642-13953-6\_3},
	timestamp    = {Tue, 14 May 2019 10:00:45 +0200},
	biburl       = {https://dblp.org/rec/conf/tools/CarretonMCM10.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{schmeder2010best,
	title={Best practices for open sound control},
	author={Schmeder, Andrew and Freed, Adrian and Wessel, David},
	booktitle={Linux Audio Conference},
	volume={10},
	year={2010}
}

@article{DBLP:journals/tse/MargaraS18,
	author       = {Alessandro Margara and
	Guido Salvaneschi},
	title        = {On the Semantics of Distributed Reactive Programming: The Cost of
	Consistency},
	journal      = {{IEEE} Trans. Software Eng.},
	volume       = {44},
	number       = {7},
	pages        = {689--711},
	year         = {2018},
	url          = {https://doi.org/10.1109/TSE.2018.2833109},
	doi          = {10.1109/TSE.2018.2833109},
	timestamp    = {Mon, 26 Jun 2023 20:55:21 +0200},
	biburl       = {https://dblp.org/rec/journals/tse/MargaraS18.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/icfp/ElliottH97,
	author       = {Conal Elliott and
	Paul Hudak},
	editor       = {Simon L. Peyton Jones and
	Mads Tofte and
	A. Michael Berman},
	title        = {Functional Reactive Animation},
	booktitle    = {Proceedings of the 1997 {ACM} {SIGPLAN} International Conference on
	Functional Programming {(ICFP} '97), Amsterdam, The Netherlands, June
	9-11, 1997},
	pages        = {263--273},
	publisher    = {{ACM}},
	year         = {1997},
	url          = {https://doi.org/10.1145/258948.258973},
	doi          = {10.1145/258948.258973},
	timestamp    = {Thu, 08 Jul 2021 16:04:01 +0200},
	biburl       = {https://dblp.org/rec/conf/icfp/ElliottH97.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/programming/SterzEMBGHMF21,
	author       = {Artur Sterz and
	Matthias Eichholz and
	Ragnar Mogk and
	Lars Baumg{\"{a}}rtner and
	Pablo Graubner and
	Matthias Hollick and
	Mira Mezini and
	Bernd Freisleben},
	title        = {ReactiFi: Reactive Programming of Wi-Fi Firmware on Mobile Devices},
	journal      = {Art Sci. Eng. Program.},
	volume       = {5},
	number       = {2},
	pages        = {4},
	year         = {2021},
	url          = {https://doi.org/10.22152/programming-journal.org/2021/5/4},
	doi          = {10.22152/PROGRAMMING-JOURNAL.ORG/2021/5/4},
	timestamp    = {Mon, 22 May 2023 09:06:11 +0200},
	biburl       = {https://dblp.org/rec/journals/programming/SterzEMBGHMF21.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/haskell/CourtneyNP03,
	author       = {Antony Courtney and
	Henrik Nilsson and
	John Peterson},
	editor       = {Johan Jeuring},
	title        = {The Yampa arcade},
	booktitle    = {Proceedings of the {ACM} {SIGPLAN} Workshop on Haskell, Haskell 2003,
	Uppsala, Sweden, August 28, 2003},
	pages        = {7--18},
	publisher    = {{ACM}},
	year         = {2003},
	url          = {https://doi.org/10.1145/871895.871897},
	doi          = {10.1145/871895.871897},
	timestamp    = {Fri, 03 Jun 2022 10:47:45 +0200},
	biburl       = {https://dblp.org/rec/conf/haskell/CourtneyNP03.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/ecoop/MogkBSFM18,
	author       = {Ragnar Mogk and
	Lars Baumg{\"{a}}rtner and
	Guido Salvaneschi and
	Bernd Freisleben and
	Mira Mezini},
	editor       = {Todd D. Millstein},
	title        = {Fault-tolerant Distributed Reactive Programming},
	booktitle    = {32nd European Conference on Object-Oriented Programming, {ECOOP} 2018,
	July 16-21, 2018, Amsterdam, The Netherlands},
	series       = {LIPIcs},
	volume       = {109},
	pages        = {1:1--1:26},
	publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	year         = {2018},
	url          = {https://doi.org/10.4230/LIPIcs.ECOOP.2018.1},
	doi          = {10.4230/LIPICS.ECOOP.2018.1},
	timestamp    = {Mon, 26 Jun 2023 20:47:01 +0200},
	biburl       = {https://dblp.org/rec/conf/ecoop/MogkBSFM18.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@book{10.5555/1951582,
	author = {Logan, Martin and Merritt, Eric and Carlsson, Richard},
	title = {Erlang and OTP in Action},
	year = {2010},
	isbn = {1933988789},
	publisher = {Manning Publications Co.},
	address = {USA},
	edition = {1st},
	abstract = {Concurrent programming has become a required discipline for all programmers. Multi-core processors and the increasing demand for maximum performance and scalability in mission-critical applications have renewed interest in functional languages like Erlang that are designed to handle concurrent programming. Erlang, and the OTP platform, make it possible to deliver more robust applications that satisfy rigorous uptime and performance requirements. Erlang and OTP in Action teaches you to apply Erlang's message passing model for concurrent programming--a completely different way of tackling the problem of parallel programming from the more common multi-threaded approach. This book walks you through the practical considerations and steps of building systems in Erlang and integrating them with real-world C/C++, Java, and .NET applications. Unlike other books on the market, Erlang and OTP in Action offers a comprehensive view of how concurrency relates to SOA and web technologies. This hands-on guide is perfect for readers just learning Erlang or for those who want to apply their theoretical knowledge of this powerful language. You'll delve into the Erlang language and OTP runtime by building several progressively more interesting real-world distributed applications. Once you are competent in the fundamentals of Erlang, the book takes you on a deep dive into the process of designing complex software systems in Erlang.}
}

@incollection{hewitt:hal-01163534,
	TITLE = {{Actor Model of Computation}},
	AUTHOR = {Hewitt, Carl},
	URL = {https://hal.science/hal-01163534},
	BOOKTITLE = {{Inconsistency Robustness}},
	YEAR = {2015},
	KEYWORDS = {Actor Model ; Actor ; Concurrency ; ActorScript},
	PDF = {https://hal.science/hal-01163534v2/file/ActorModel-008.pdf},
	HAL_ID = {hal-01163534},
	HAL_VERSION = {v2},
}




